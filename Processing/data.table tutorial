## Pracical takeaways from Datacamp Course
# Data Analysis in R, the data.table Way
# https://www.datacamp.com/courses/data-table-data-manipulation-r-tutorial

Subsetting data.tables
As a reminder, DT[i, j, by] is pronounced

Take DT, subset rows using i, then calculate j grouped by by.



# DT and the data.table package are pre-loaded

# Subset rows 1 and 3, and columns B and C
DT[c(1, 3), .(B, C)]

# Assign to ans the correct value
ans <- DT[, .(B, val = A * C)]

# Fill in the blanks such that ans2 equals target
target <- data.table(B = c("a", "b", "c", "d", "e", "a", "b", "c", "d", "e"), 
                     val = as.integer(c(6:10, 1:5)))
ans2 <- DT[, .(B, val = c(C, A))]


In this section you were introduced to the last of the main parts of the data.table syntax: by. If you supply a j expression and a by list of expressions, the j expression is repeated for each by group. Time to master the by argument with some hands-on examples and exercises.

# iris is already available in your workspace.
iris
# Convert iris to a data.table: DT
DT <- data.table(iris)

# For each Species, print the mean Sepal.Length
DT[, mean(Sepal.Length) , by= Species]
  
# Print mean Sepal.Length, grouping by first letter of Species
DT[, mean(Sepal.Length) , by= substr(Species,1,1)]  
  
  
  
  
 Using .N and by
You saw earlier that .N can be used in i and that it designates the number of rows in DT. There, it is typically used for returning the last row or an offset from it. .N can be used in j too and designates the number of rows in this group. This becomes very powerful when you use it in combination with by. 


# data.table version of iris: DT
DT <- as.data.table(iris)

# Group the specimens by Sepal area (to the nearest 10 cm2) and count how many occur in each group.
DT[, .N , by = 10 * round ( Sepal.Length * Sepal.Width / 10)]

# Now name the output columns `Area` and `Count`
DT[, .(Count= .N) , by = .(Area= 10 * round ( Sepal.Length * Sepal.Width / 10))]


# Create the data.table DT
set.seed(1L)
DT <- data.table(A=rep(letters[2:1], each=4L), B=rep(1:4, each=2L), C=sample(8))

# Create the new data.table, DT2
DT2 <- DT[, .( C= cumsum(C) ) , by=.(A,B)]

# Select from DT2 the last two values from C while you group by A
DT2[  , .(C= tail(C,2)) ,by= A]



Chaining, the basics
Now that you are comfortable with data.table's DT[i, j, by] syntax, it is time to practice some other very useful concepts in data.table. Here, we'll have a more detailed look at chaining.

Chaining allows the concatenation of multiple operations in a single expression. It's easy to read because the operations are carried out from left to right. Furthermore, it helps to avoid the creation of unnecessary temporary variables (which could quickly clutter one's workspace).

# The data.table package has already been loaded

# Build DT
DT <- data.table(A = rep(letters[2:1], each = 4L), 
                 B = rep(1:4, each = 2L), 
                 C = sample(8)) 

# Combine the two steps in a one-liner
#DT2 <- DT[, .(C = cumsum(C)), by = .(A, B)]
#DT2[, .(C = tail(C, 2)), by = A]

DT2 <- DT[, .(C = cumsum(C)), by = .(A, B)][, .(C = tail(C, 2)), by = A]



Programming time vs readability
It is a good idea to make use of familiar functions from base R to reduce programming time without losing readability.

The data.table package provides a special built-in variable .SD. It refers to the subset of data for each unique value of the by argument. That is, the number of observations in the output will be equal to the number of unique values in by.

Recall that the by argument allows us to separate a data.table into groups. 
We can now use the .SD variable to reference each group and apply functions separately. For example, suppose we had a data.table storing information about dogs:


# A new data.table DT is available
DT[1:5]

# Mean of columns
DT[, lapply(.SD,mean) ,by=x ]

# Median of columns
DT[, lapply(.SD,median) ,by=x ]




.SDcols specifies the columns of DT that are included in .SD. Using .SDcols comes in handy if you have too many columns and you want to perform a particular operation on a subset of the columns (apart from the grouping variable columns).

Using .SDcols allows you to apply a function to all rows of a data.table, but only to some of the columns. For example, consider the dog example from the last exercise. If you wanted to compute the average weight and age (the second and third columns) for all dogs, you could assign .SDcols accordingly:

dogs[, lapply(.SD, mean), .SDcols = 2:3]
   Weight Age
1:     56 5.2
While learning the data.table package, you may want to occasionally refer to the documentation. Have a look at ?data.table for more info on .SDcols.


# A new data.table DT is available

# Calculate the sum of the Q columns
DT[,lapply(.SD,sum),.SDcols=2:4]

# Calculate the sum of columns H1 and H2 
DT[, lapply(.SD,sum) , .SDcols=paste0("H",as.character(1:2))]

# Select all but the first row of groups 1 and 2, returning only the grp column and the Q columns
DT[ , .SD[-1] , .SDcols=paste0("Q",as.character(1:3)) , by=grp ]



Mixing it together: lapply, .SD, .SDcols and .N
This exercise is a challenging one, so don't give up! It's important to remember that whenever the j argument is a list (e.g. if it contains .SD or a call to lapply()), a data.table is returned. For example:

dogs[, lapply(.SD, mean), by = sex, .SDcols = c("weight", "age")]
will return a data.table containing average weights and ages for dogs of each sex.

It's also helpful to know that combining a list with a vector results in a new longer list. Lastly, note that when you select .N on its own, it is renamed N in the output for convenience when chaining.

# DT is pre-loaded

# Sum of all columns and the number of rows
DT[ , c( lapply(.SD , sum ) , .N), by=x , .SDcols=colnames(DT)]

# Cumulative sum of column x and y while grouping by x and z > 8
DT[, lapply(.SD, cumsum), by = .(by1 = x, by2 = z > 8), .SDcols = c("x", "y")]





Adding, updating and removing columns
As you now know, := is defined for use in j only, and is used to update data.tables by reference. One way of using := is the LHS := RHS form, where LHS is a character vector of columns (referenced by name or number) you wish to update and RHS is the corresponding value for each column (Note: LHS stands for "left hand side" and RHS stands for "right hand side" in what follows).

For example, the following line multiplies every row of column C by 10 and stores the result in C:

DT[, C := C * 10]


# The data.table DT
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)

# Add column by reference: Total
DT[, Total:= sum(B) , by= A ]

# Add 1 to column B
DT[c(2,4) , B := B+1L ]

# Add a new column Total2
DT[2:4 , Total2:= sum(B) , by= A ]

# Remove the Total column
DT[, Total:= NULL  ]

# Select the third column using `[[`
DT[[3]]



ou've had practice with using := in the LHS := RHS form. The second way to use := is with functional form:

DT[, `:=`(colA = colB + colC)]
Notice that the := is surrounded by two tick marks! Otherwise data.table will throw a syntax error. It is also important to note that in the generic functional form above, my_fun() can refer to any function, including the basic arithmetic functions. The nice thing about the functional form is that you can get both the RHS alongside the LHS so that it's easier to read.


# A data.table DT has been created for you
DT <- data.table(A = c(1, 1, 1, 2, 2), B = 1:5)

# Update B, add C and D
DT[,`:=`(B=B+1 ,
          C=A+B,
          D=2)]

# Delete my_cols
my_cols <- c("B", "C")
DT[,(my_cols):=NULL]

# Delete column 2 by number
DT[,2:=NULL]




The set() function is used to repeatedly update a data.table by reference. You can think of the set() function as a loopable, low overhead version of the := operator, except that set() cannot be used for grouping operations. The structure of the set() function looks like this:

set(DT, index, column, value)
The function takes four arguments:

A data.table with the columns you wish to update
The index used in a loop (e.g. the i in for(i in 1:5))
The column or columns you wish to update in the loop
How the column or columns should be updated
In the next two exercises, you will focus on using set() and its siblings setnames() and setcolorder()

# Set the seed
set.seed(1)

# Check the DT that is made available to you
DT

# For loop with set
for (i in 2:4 ) set(DT , sample(nrow(DT), size=3) , i , NA )

# Change the column names to lowercase
setnames (DT , colnames(DT) , tolower(colnames(DT)) )

# Print the resulting DT to the console
DT


A summary of the set() family:

set() is a loopable, low overhead version of :=.
You can use setnames() to set or change column names.
setcolorder() lets you reorder the columns of a data.table.


# Define DT
DT <- data.table(a = letters[c(1, 1, 1, 2, 2)], b = 1)

# Add a suffix "_2" to all column names
setnames (DT , colnames(DT) , paste0(colnames(DT) , "_2") )

# Change column name "a_2" to "A2"
setnames (DT , "a_2" , "A2" )

# Reverse the order of the columns
setcolorder ( DT, rev(colnames(DT))  )

#################################
Selecting rows the data.table way
# The data.table package is pre-loaded

# Convert iris to a data.table
iris <- as.data.table(iris)

# Species is "virginica"
iris[Species=="virginica"]

# Species is either "virginica" or "versicolor"
iris[Species %in% c("virginica","versicolor")]


Removing columns and adapting your column names
In the previous exercise, you selected certain rows from the iris data.table based on the column names. Now you have to take your understanding of the data.table package to the next level by using standard R functions and regular expressions to remove columns and change column names. To practice this, you'll do a little manipulation to prepare for the next exercise.

Since regular expressions can be tricky, here is a quick refresher:

Metacharacters allow you to match certain types of characters. For example, . means any single character, ^ means "begins with", and $ means "ends with".
If you want to use any of the metacharacters as actual text, you need to use the \\ escape sequence.

# iris as a data.table
iris <- as.data.table(iris)

# Remove the "Sepal." prefix
setnames(iris, gsub( colnames(iris) , pattern="Sepal." , replacement="") )

# Remove the two columns starting with "Petal"
iris[ , grep("^Petal" , colnames(iris)) := NULL ]



Understanding automatic indexing
You've been introduced to the rule that "if i is a single variable name, it is evaluated in the calling scope, otherwise inside DT's scope". This is a very important rule if you want to conceptually understand what is going on when using column names in i. Only single columns on the left side of operators benefit from automatic indexing.

# Cleaned up iris data.table
iris

# Area is greater than 20 square centimeters
iris[Length*Width >20]

# Add new boolean column
iris[ , is_large := (Length*Width >25) ]

# Now large observations with is_large
iris[ is_large == TRUE ]



Selecting groups or parts of groups
The previous exercise illustrated how you can manually set a key via setkey(DT, A, B). setkey() sorts the data by the columns that you specify and changes the table by reference. Having set a key will allow you to use it, for example, as a super-charged row name when doing selections. Arguments like mult and nomatch then help you to select only particular parts of groups.

Furthermore, two of the instructions will require you to make use of by = .EACHI. 
This allows you to run j for each group in which each item in i joins too. 
The last instruction will require you to produce a side effect inside the j argument in addition to selecting rows.


# The 'keyed' data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)], 
                 B = c(5, 4, 1, 9, 8, 8, 6), 
                 C = 6:12)
setkey(DT, A, B)

# Select the "b" group
DT[A=="b"]

# "b" and "c" groups
DT[ A %in% c("b","c") ]

# The first row of the "b" and "c" groups
DT[ c("b","c") , mult="first" ]

# First and last row of the "b" and "c" groups
DT[ c("b","c") , .SD[c(1, .N)] , by= .EACHI ]


# Copy and extend code for instruction 4: add printout
DT[ c("b","c") ,  { print(.SD) ; .SD[c(1, .N)] } , by= .EACHI ]

###################################
Rolling joins - part one
In the last video, you learned about rolling joins. The roll applies to the NA values in the last join column. In the next three exercises, you will learn how to work with rolling joins in a data.table setting.

Instructions
The same keyed data.table from before, DT, has been provided in the sample code.

Get the key of DT through the key() function.
Use the super-charged row names to look up the row where A == "b" and B == 6, without using ==! Verify here that column C is NA.
Based on the query that was written in the previous instruction, return the prevailing row before this "gap". Specify the roll argument.
Again, start with the code from the second instruction, but this time, find the nearest row. Specify the roll argument accordingly.


# Keyed data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)], 
                 B = c(5, 4, 1, 9, 8, 8, 6), 
                 C = 6:12, 
                 key = "A,B")

# Get the key of DT
key(DT)

# Row where A == "b" and B == 6
DT[.("b",6)]

# Return the prevailing row
DT[.("b",6) , roll=Inf]

# Return the nearest row
DT[.("b",6) , roll="nearest"]


It is time to move on to the rollends argument. The rollends argument is actually a vector of two logical values, but remember that you can always look this up via ?data.table. You were introduced to this argument via the control ends section. If you want to roll for a certain distance, you should continue to use the roll argument.

Instructions
For the group where column A is equal to "b", print out the sequence when column B is set equal to (-2):10. Remember, A and B are the keys for this data.table.
Extend the code you wrote for the first instruction to roll the prevailing values forward to replace the NAs.
Extend your code with the appropriate rollends value to roll the first observation backwards.


# Keyed data.table DT
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)], 
                 B = c(5, 4, 1, 9, 8, 8, 6), 
                 C = 6:12, 
                 key = "A,B")

# Print the sequence (-2):10 for the "b" group
DT[ .("b" ,-2:10 )]

# Add code: carry the prevailing values forwards
DT[ .("b" ,-2:10 ) , roll=TRUE ]

# Add code: carry the first observation backwards
DT[ .("b" ,-2:10 ) , roll=TRUE , rollends= c(TRUE, TRUE)]



























